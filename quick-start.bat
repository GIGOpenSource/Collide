@echo off
chcp 65001 >nul
setlocal EnableDelayedExpansion

:: ==========================================
:: Collide Â∫îÁî®ÊúçÂä°Âø´ÈÄüÂêØÂä®ËÑöÊú¨ (WindowsÁâà)
:: ==========================================

:: ËÆæÁΩÆÈ¢úËâ≤
set "RED=[91m"
set "GREEN=[92m"
set "YELLOW=[93m"
set "BLUE=[94m"
set "NC=[0m"

:: Êó•ÂøóÂáΩÊï∞
:log_info
echo %BLUE%[INFO]%NC% %~1
goto :eof

:log_success
echo %GREEN%[SUCCESS]%NC% %~1
goto :eof

:log_warning
echo %YELLOW%[WARNING]%NC% %~1
goto :eof

:log_error
echo %RED%[ERROR]%NC% %~1
goto :eof

:: Ê£ÄÊü•Á≥ªÁªüË¶ÅÊ±Ç
:check_requirements
call :log_info "Ê£ÄÊü•Á≥ªÁªüË¶ÅÊ±Ç..."

docker --version >nul 2>&1
if %errorlevel% neq 0 (
    call :log_error "Docker Êú™ÂÆâË£ÖÊàñÊú™Ê∑ªÂä†Âà∞PATHÔºåËØ∑ÂÖàÂÆâË£Ö Docker Desktop"
    exit /b 1
)

docker-compose --version >nul 2>&1
if %errorlevel% neq 0 (
    call :log_error "Docker Compose Êú™ÂÆâË£ÖÔºåËØ∑ÂÖàÂÆâË£Ö Docker Compose"
    exit /b 1
)

docker info >nul 2>&1
if %errorlevel% neq 0 (
    call :log_error "Docker ÊúçÂä°Êú™ÂêØÂä®ÔºåËØ∑ÂêØÂä® Docker Desktop"
    exit /b 1
)

call :log_success "Á≥ªÁªüË¶ÅÊ±ÇÊ£ÄÊü•ÈÄöËøá"
goto :eof

:: Ê£ÄÊü•Á´ØÂè£Âç†Áî®
:check_ports
call :log_info "Ê£ÄÊü•Â∫îÁî®ÊúçÂä°Á´ØÂè£Âç†Áî®ÊÉÖÂÜµ..."

set "PORTS=8081 8082 8085"
set "OCCUPIED_PORTS="

for %%p in (%PORTS%) do (
    netstat -an | findstr ":%%p " >nul 2>&1
    if !errorlevel! equ 0 (
        set "OCCUPIED_PORTS=!OCCUPIED_PORTS! %%p"
    )
)

if defined OCCUPIED_PORTS (
    call :log_warning "‰ª•‰∏ãÁ´ØÂè£Â∑≤Ë¢´Âç†Áî®:!OCCUPIED_PORTS!"
    call :log_warning "ËØ∑Á°Æ‰øùËøô‰∫õÁ´ØÂè£ÂèØÁî®ÔºåÊàñÂÅúÊ≠¢Âç†Áî®Ëøô‰∫õÁ´ØÂè£ÁöÑÊúçÂä°"
    set /p "REPLY=ÊòØÂê¶ÁªßÁª≠ÈÉ®ÁΩ≤? (y/N): "
    if /i not "!REPLY!"=="y" exit /b 1
) else (
    call :log_success "Á´ØÂè£Ê£ÄÊü•ÈÄöËøá"
)
goto :eof

:: Ê£ÄÊü•‰∏≠Èó¥‰ª∂ËøûÈÄöÊÄß
:check_middleware
call :log_info "Ê£ÄÊü•‰∏≠Èó¥‰ª∂ËøûÈÄöÊÄß..."

:: Ê£ÄÊü•MySQL
netstat -an | findstr "127.0.0.1:3306" >nul 2>&1
if %errorlevel% neq 0 (
    call :log_warning "MySQL (3306) ËøûÊé•Â§±Ë¥•ÔºåËØ∑Á°Æ‰øùMySQLÊúçÂä°Â∑≤ÂêØÂä®"
) else (
    call :log_success "MySQL ËøûÊé•Ê≠£Â∏∏"
)

:: Ê£ÄÊü•Redis
netstat -an | findstr "127.0.0.1:6379" >nul 2>&1
if %errorlevel% neq 0 (
    call :log_warning "Redis (6379) ËøûÊé•Â§±Ë¥•ÔºåËØ∑Á°Æ‰øùRedisÊúçÂä°Â∑≤ÂêØÂä®"
) else (
    call :log_success "Redis ËøûÊé•Ê≠£Â∏∏"
)

:: Ê£ÄÊü•Nacos
netstat -an | findstr "127.0.0.1:8848" >nul 2>&1
if %errorlevel% neq 0 (
    call :log_warning "Nacos (8848) ËøûÊé•Â§±Ë¥•ÔºåËØ∑Á°Æ‰øùNacosÊúçÂä°Â∑≤ÂêØÂä®"
) else (
    call :log_success "Nacos ËøûÊé•Ê≠£Â∏∏"
)

:: Ê£ÄÊü•RocketMQ
netstat -an | findstr "127.0.0.1:9876" >nul 2>&1
if %errorlevel% neq 0 (
    call :log_warning "RocketMQ (9876) ËøûÊé•Â§±Ë¥•ÔºåËØ∑Á°Æ‰øùRocketMQÊúçÂä°Â∑≤ÂêØÂä®"
) else (
    call :log_success "RocketMQ ËøûÊé•Ê≠£Â∏∏"
)
goto :eof

:: ÂêØÂä®Â∫îÁî®ÊúçÂä°
:start_applications
call :log_info "ÂêØÂä®Â∫îÁî®ÊúçÂä°..."

:: ÂêØÂä®ËÆ§ËØÅÊúçÂä°
call :log_info "ÂêØÂä®ËÆ§ËØÅÊúçÂä°..."
docker-compose up -d collide-auth
if %errorlevel% neq 0 (
    call :log_error "ËÆ§ËØÅÊúçÂä°ÂêØÂä®Â§±Ë¥•"
    exit /b 1
)

:: Á≠âÂæÖËÆ§ËØÅÊúçÂä°ÂêØÂä®
call :log_info "Á≠âÂæÖËÆ§ËØÅÊúçÂä°ÂêØÂä®..."
set /a count=0
:wait_auth
curl -s http://localhost:8082/actuator/health | findstr "UP" >nul 2>&1
if %errorlevel% equ 0 (
    call :log_success "ËÆ§ËØÅÊúçÂä°ÂêØÂä®ÊàêÂäü"
    goto :auth_ready
)
set /a count+=1
if %count% geq 30 (
    call :log_error "ËÆ§ËØÅÊúçÂä°ÂêØÂä®Ë∂ÖÊó∂ÔºåËØ∑Ê£ÄÊü•Êó•Âøó: docker-compose logs collide-auth"
    exit /b 1
)
timeout /t 3 /nobreak >nul
goto :wait_auth
:auth_ready

:: ÂêØÂä®Â∫îÁî®ÊúçÂä°
call :log_info "ÂêØÂä®Â∫îÁî®ÊúçÂä°..."
docker-compose up -d collide-application
if %errorlevel% neq 0 (
    call :log_error "Â∫îÁî®ÊúçÂä°ÂêØÂä®Â§±Ë¥•"
    exit /b 1
)

:: Á≠âÂæÖÂ∫îÁî®ÊúçÂä°ÂêØÂä®
call :log_info "Á≠âÂæÖÂ∫îÁî®ÊúçÂä°ÂêØÂä®..."
set /a count=0
:wait_app
curl -s http://localhost:8085/actuator/health | findstr "UP" >nul 2>&1
if %errorlevel% equ 0 (
    call :log_success "Â∫îÁî®ÊúçÂä°ÂêØÂä®ÊàêÂäü"
    goto :app_ready
)
set /a count+=1
if %count% geq 60 (
    call :log_error "Â∫îÁî®ÊúçÂä°ÂêØÂä®Ë∂ÖÊó∂ÔºåËØ∑Ê£ÄÊü•Êó•Âøó: docker-compose logs collide-application"
    exit /b 1
)
timeout /t 3 /nobreak >nul
goto :wait_app
:app_ready

:: ÂêØÂä®ÁΩëÂÖ≥ÊúçÂä°
call :log_info "ÂêØÂä®ÁΩëÂÖ≥ÊúçÂä°..."
docker-compose up -d collide-gateway
if %errorlevel% neq 0 (
    call :log_error "ÁΩëÂÖ≥ÊúçÂä°ÂêØÂä®Â§±Ë¥•"
    exit /b 1
)

:: Á≠âÂæÖÁΩëÂÖ≥ÊúçÂä°ÂêØÂä®
call :log_info "Á≠âÂæÖÁΩëÂÖ≥ÊúçÂä°ÂêØÂä®..."
set /a count=0
:wait_gateway
curl -s http://localhost:8081/actuator/health | findstr "UP" >nul 2>&1
if %errorlevel% equ 0 (
    call :log_success "ÁΩëÂÖ≥ÊúçÂä°ÂêØÂä®ÊàêÂäü"
    goto :gateway_ready
)
set /a count+=1
if %count% geq 30 (
    call :log_error "ÁΩëÂÖ≥ÊúçÂä°ÂêØÂä®Ë∂ÖÊó∂ÔºåËØ∑Ê£ÄÊü•Êó•Âøó: docker-compose logs collide-gateway"
    exit /b 1
)
timeout /t 3 /nobreak >nul
goto :wait_gateway
:gateway_ready

call :log_success "ÊâÄÊúâÂ∫îÁî®ÊúçÂä°ÂêØÂä®ÂÆåÊàê"
goto :eof

:: ÊòæÁ§∫ÊúçÂä°Áä∂ÊÄÅ
:show_status
call :log_info "ÊúçÂä°Áä∂ÊÄÅ:"
docker-compose ps

echo.
call :log_info "Â∫îÁî®ÊúçÂä°ËÆøÈóÆÂú∞ÂùÄ:"
echo üåê ÁΩëÂÖ≥ÊúçÂä°:        http://localhost:8081
echo üîê ËÆ§ËØÅÊúçÂä°:        http://localhost:8082
echo üöÄ Â∫îÁî®ÊúçÂä°:        http://localhost:8085

echo.
call :log_info "ÂÅ•Â∫∑Ê£ÄÊü•:"
echo üîç ÁΩëÂÖ≥ÂÅ•Â∫∑Ê£ÄÊü•:    curl http://localhost:8081/actuator/health
echo üîç ËÆ§ËØÅÂÅ•Â∫∑Ê£ÄÊü•:    curl http://localhost:8082/actuator/health
echo üîç Â∫îÁî®ÂÅ•Â∫∑Ê£ÄÊü•:    curl http://localhost:8085/actuator/health

echo.
call :log_success "Collide Â∫îÁî®ÊúçÂä°ÈÉ®ÁΩ≤ÂÆåÊàêÔºÅ"
goto :eof

:: Ê∏ÖÁêÜÂáΩÊï∞
:cleanup
call :log_info "ÂÅúÊ≠¢ÊâÄÊúâÂ∫îÁî®ÊúçÂä°..."
docker-compose down
call :log_success "Â∫îÁî®ÊúçÂä°Â∑≤ÂÅúÊ≠¢"
goto :eof

:: ÊòæÁ§∫Â∏ÆÂä©
:show_help
echo Áî®Ê≥ï: %~n0 [ÂëΩ‰ª§]
echo.
echo ÂëΩ‰ª§:
echo   (Êó†ÂèÇÊï∞)  - ÂêØÂä®ÊâÄÊúâÂ∫îÁî®ÊúçÂä°
echo   stop      - ÂÅúÊ≠¢ÊâÄÊúâÂ∫îÁî®ÊúçÂä°
echo   restart   - ÈáçÂêØÊâÄÊúâÂ∫îÁî®ÊúçÂä°
echo   status    - Êü•ÁúãÂ∫îÁî®ÊúçÂä°Áä∂ÊÄÅ
echo   logs      - Êü•ÁúãÊó•Âøó
echo   help      - ÊòæÁ§∫Â∏ÆÂä©‰ø°ÊÅØ
echo.
echo Á§∫‰æã:
echo   %~n0                         # ÂêØÂä®ÊâÄÊúâÂ∫îÁî®ÊúçÂä°
echo   %~n0 stop                   # ÂÅúÊ≠¢ÊâÄÊúâÂ∫îÁî®ÊúçÂä°
echo   %~n0 logs                   # Êü•ÁúãÊâÄÊúâÊúçÂä°Êó•Âøó
goto :eof

:: ‰∏ªÂáΩÊï∞
:main
echo ==========================================
echo üöÄ Collide Â∫îÁî®ÊúçÂä°Âø´ÈÄüÈÉ®ÁΩ≤ËÑöÊú¨ (WindowsÁâà)
echo ==========================================
echo.

:: Ê£ÄÊü•ÂèÇÊï∞
if "%~1"=="stop" (
    call :cleanup
    goto :eof
)
if "%~1"=="status" (
    docker-compose ps
    goto :eof
)
if "%~1"=="logs" (
    docker-compose logs -f
    goto :eof
)
if "%~1"=="restart" (
    call :cleanup
    timeout /t 3 /nobreak >nul
)
if "%~1"=="help" (
    call :show_help
    goto :eof
)
if "%~1"=="-h" (
    call :show_help
    goto :eof
)
if "%~1"=="--help" (
    call :show_help
    goto :eof
)

:: ÊâßË°åÈÉ®ÁΩ≤ÊµÅÁ®ã
call :check_requirements
if %errorlevel% neq 0 exit /b 1

call :check_ports
if %errorlevel% neq 0 exit /b 1

call :check_middleware
if %errorlevel% neq 0 exit /b 1

call :start_applications
if %errorlevel% neq 0 exit /b 1

call :show_status
goto :eof

:: ÂÖ•Âè£ÁÇπ
call :main %* 