### Collide 认证服务 HTTP 测试文件
### 使用说明：在 IntelliJ IDEA 或 VSCode 中可以直接运行这些请求

# 设置变量
@baseUrl = http://localhost:8080/api/v1/auth
@testUsername = testuser{{$timestamp}}
@testPassword = 123456

### 1. 服务健康检查
GET {{baseUrl}}/test

### 2. 用户注册
POST {{baseUrl}}/register
Content-Type: application/json

{
  "username": "{{testUsername}}",
  "password": "{{testPassword}}",
  "inviteCode": "ABC123"
}

> {%
  // 保存注册后的 token
  if (response.body.success) {
    client.global.set("authToken", response.body.data.token);
    client.global.set("username", response.body.data.user.username);
  }
%}

### 3. 用户登录
POST {{baseUrl}}/login
Content-Type: application/json

{
  "username": "{{testUsername}}",
  "password": "{{testPassword}}",
  "rememberMe": true
}

> {%
  if (response.body.success) {
    client.global.set("authToken", response.body.data.token);
  }
%}

### 4. 登录或注册（推荐使用）
POST {{baseUrl}}/login-or-register
Content-Type: application/json

{
  "username": "demo{{$timestamp}}",
  "password": "123456",
  "inviteCode": "TEST123"
}

> {%
  if (response.body.success) {
    client.global.set("authToken", response.body.data.token);
    client.global.set("isNewUser", response.body.data.isNewUser);
    console.log("Is new user:", response.body.data.isNewUser);
  }
%}

### 5. 验证邀请码
GET {{baseUrl}}/validate-invite-code?inviteCode=ABC123

### 6. 获取我的邀请信息（需要登录）
GET {{baseUrl}}/my-invite-info
Authorization: Bearer {{authToken}}

### 7. 用户登出（需要登录）
POST {{baseUrl}}/logout
Authorization: Bearer {{authToken}}

###
### 错误测试场景
###

### 8. 测试用户名过短
POST {{baseUrl}}/register
Content-Type: application/json

{
  "username": "ab",
  "password": "123456"
}

### 9. 测试密码过短
POST {{baseUrl}}/register
Content-Type: application/json

{
  "username": "testuser123",
  "password": "123"
}

### 10. 测试空用户名
POST {{baseUrl}}/register
Content-Type: application/json

{
  "username": "",
  "password": "123456"
}

### 11. 测试错误密码登录
POST {{baseUrl}}/login
Content-Type: application/json

{
  "username": "{{testUsername}}",
  "password": "wrongpassword"
}

### 12. 测试无效邀请码
GET {{baseUrl}}/validate-invite-code?inviteCode=INVALID123

### 13. 测试未登录访问需要认证的接口
GET {{baseUrl}}/my-invite-info

###
### 性能和压力测试
###

### 14. 批量注册测试（需要修改用户名）
POST {{baseUrl}}/login-or-register
Content-Type: application/json

{
  "username": "batch_user_001",
  "password": "123456"
}

###

### 15. 同时登录测试
POST {{baseUrl}}/login-or-register
Content-Type: application/json

{
  "username": "concurrent_user",
  "password": "123456"
}

###
### 边界值测试
###

### 16. 最长用户名测试（20字符）
POST {{baseUrl}}/register
Content-Type: application/json

{
  "username": "12345678901234567890",
  "password": "123456"
}

### 17. 最长密码测试（20字符）
POST {{baseUrl}}/register
Content-Type: application/json

{
  "username": "maxpassworduser",
  "password": "12345678901234567890"
}

###
### 特殊字符测试
###

### 18. 特殊字符用户名测试
POST {{baseUrl}}/register
Content-Type: application/json

{
  "username": "test_user-123",
  "password": "123456"
}

### 19. 中文用户名测试（应该失败）
POST {{baseUrl}}/register
Content-Type: application/json

{
  "username": "测试用户",
  "password": "123456"
}

###
### 完整流程测试
###

### 20. 完整用户生命周期测试
# Step 1: 注册新用户
POST {{baseUrl}}/register
Content-Type: application/json

{
  "username": "lifecycle_user",
  "password": "123456",
  "inviteCode": "LIFE123"
}

> {%
  if (response.body.success) {
    client.global.set("lifecycleToken", response.body.data.token);
  }
%}

###

# Step 2: 获取用户信息
GET {{baseUrl}}/my-invite-info
Authorization: Bearer {{lifecycleToken}}

###

# Step 3: 登出
POST {{baseUrl}}/logout
Authorization: Bearer {{lifecycleToken}}

###

# Step 4: 重新登录
POST {{baseUrl}}/login
Content-Type: application/json

{
  "username": "lifecycle_user",
  "password": "123456"
}

### 