<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.gig.collide.users.infrastructure.mapper.UserMapper">

    <!-- 基础字段映射 -->
    <sql id="baseColumns">
        id, username, nickname, avatar, email, phone, password_hash, status,
        bio, birthday, gender, location, follower_count, following_count, content_count, like_count,
        vip_expire_time, last_login_time, login_count, invite_code, inviter_id, invited_count,
        create_time, update_time
    </sql>

    <!-- 根据ID查询用户 -->
    <select id="findById" parameterType="long" resultType="com.gig.collide.users.domain.entity.User">
        SELECT <include refid="baseColumns" />
        FROM t_user
        WHERE id = #{id} AND status != 'deleted'
    </select>
    
    <!-- 根据ID查询用户（基础信息，性能优化版） -->
    <select id="findByIdBasic" parameterType="long" resultType="com.gig.collide.users.domain.entity.User">
        SELECT id, username, nickname, avatar, status, invite_code, inviter_id, invited_count, create_time, update_time
        FROM t_user
        WHERE id = #{id} AND status != 'deleted'
    </select>

    <!-- 根据用户名查询用户 -->
    <select id="findByUsername" parameterType="string" resultType="com.gig.collide.users.domain.entity.User">
        SELECT <include refid="baseColumns" />
        FROM t_user
        WHERE username = #{username} AND status != 'deleted'
    </select>
    
    <!-- 根据用户名查询用户（仅登录必要字段，性能优化版） -->
    <select id="findByUsernameForLogin" parameterType="string" resultType="com.gig.collide.users.domain.entity.User">
        SELECT id, username, password_hash, status, last_login_time, login_count
        FROM t_user
        WHERE username = #{username} AND status != 'deleted'
    </select>

    <!-- 根据邮箱查询用户 -->
    <select id="findByEmail" parameterType="string" resultType="com.gig.collide.users.domain.entity.User">
        SELECT <include refid="baseColumns" />
        FROM t_user
        WHERE email = #{email} AND status != 'deleted'
    </select>

    <!-- 根据手机号查询用户 -->
    <select id="findByPhone" parameterType="string" resultType="com.gig.collide.users.domain.entity.User">
        SELECT <include refid="baseColumns" />
        FROM t_user
        WHERE phone = #{phone} AND status != 'deleted'
    </select>

    <!-- 分页查询用户列表 -->
    <select id="findUsersByCondition" resultType="com.gig.collide.users.domain.entity.User">
        SELECT <include refid="baseColumns" />
        FROM t_user
        <where>
            status != 'deleted'
            <if test="username != null and username != ''">
                AND username LIKE CONCAT('%', #{username}, '%')
            </if>
            <if test="nickname != null and nickname != ''">
                AND nickname LIKE CONCAT('%', #{nickname}, '%')
            </if>
            <if test="email != null and email != ''">
                AND email = #{email}
            </if>
            <if test="phone != null and phone != ''">
                AND phone = #{phone}
            </if>
            <if test="status != null and status != ''">
                AND status = #{status}
            </if>
        </where>
        ORDER BY create_time DESC
        LIMIT #{offset}, #{size}
    </select>

    <!-- 统计用户数量 -->
    <select id="countUsersByCondition" resultType="long">
        SELECT COUNT(*)
        FROM t_user
        <where>
            status != 'deleted'
            <if test="username != null and username != ''">
                AND username LIKE CONCAT('%', #{username}, '%')
            </if>
            <if test="nickname != null and nickname != ''">
                AND nickname LIKE CONCAT('%', #{nickname}, '%')
            </if>
            <if test="email != null and email != ''">
                AND email = #{email}
            </if>
            <if test="phone != null and phone != ''">
                AND phone = #{phone}
            </if>
            <if test="status != null and status != ''">
                AND status = #{status}
            </if>
        </where>
    </select>

    <!-- 插入用户 -->
    <insert id="insert" parameterType="com.gig.collide.users.domain.entity.User" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO t_user (
            username, nickname, avatar, email, phone, password_hash, status,
            bio, birthday, gender, location, invite_code, inviter_id
        ) VALUES (
            #{username}, #{nickname}, #{avatar}, #{email}, #{phone}, #{passwordHash}, #{status},
            #{bio}, #{birthday}, #{gender}, #{location}, #{inviteCode}, #{inviterId}
        )
    </insert>

    <!-- 更新用户信息 -->
    <update id="updateById" parameterType="com.gig.collide.users.domain.entity.User">
        UPDATE t_user
        <set>
            <if test="nickname != null">nickname = #{nickname},</if>
            <if test="avatar != null">avatar = #{avatar},</if>
            <if test="email != null">email = #{email},</if>
            <if test="phone != null">phone = #{phone},</if>
            <if test="bio != null">bio = #{bio},</if>
            <if test="birthday != null">birthday = #{birthday},</if>
            <if test="gender != null">gender = #{gender},</if>
            <if test="location != null">location = #{location},</if>
            <if test="status != null">status = #{status},</if>
            <if test="vipExpireTime != null">vip_expire_time = #{vipExpireTime},</if>
            update_time = NOW()
        </set>
        WHERE id = #{id}
    </update>

    <!-- 更新用户状态 -->
    <update id="updateUserStatus">
        UPDATE t_user
        SET status = #{status}, update_time = NOW()
        WHERE id = #{userId}
    </update>

    <!-- 更新最后登录时间 -->
    <update id="updateLastLoginTime">
        UPDATE t_user
        SET last_login_time = NOW(),
            login_count = login_count + 1,
            update_time = NOW()
        WHERE id = #{userId}
    </update>
    
    <!-- 用户登录验证（性能优化版） -->
    <select id="loginAndUpdateTime" parameterType="map" resultType="com.gig.collide.users.domain.entity.User">
        SELECT id, username, nickname, avatar, status, invite_code, inviter_id, invited_count,
               last_login_time, login_count, create_time, update_time
        FROM t_user
        WHERE username = #{username} AND password_hash = #{passwordHash} AND status != 'deleted'
    </select>

    <!-- 更新用户统计数据 -->
    <update id="updateUserStats">
        UPDATE t_user
        <set>
            <if test="statsType == 'follower'">
                follower_count = follower_count + #{increment},
            </if>
            <if test="statsType == 'following'">
                following_count = following_count + #{increment},
            </if>
            <if test="statsType == 'content'">
                content_count = content_count + #{increment},
            </if>
            <if test="statsType == 'like'">
                like_count = like_count + #{increment},
            </if>
            <if test="statsType == 'invited'">
                invited_count = invited_count + #{increment},
            </if>
            update_time = NOW()
        </set>
        WHERE id = #{userId}
    </update>

    <!-- 删除用户（逻辑删除） -->
    <update id="deleteById">
        UPDATE t_user
        SET status = 'deleted', update_time = NOW()
        WHERE id = #{userId}
    </update>

</mapper> 