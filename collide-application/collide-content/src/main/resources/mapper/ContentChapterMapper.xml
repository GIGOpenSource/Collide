<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.gig.collide.content.infrastructure.mapper.ContentChapterMapper">

    <!-- 基础字段定义 -->
    <sql id="baseColumns">
        id, content_id, chapter_num, title, content, word_count, status, create_time, update_time
    </sql>

    <!-- 根据内容ID查询章节列表（按章节号排序） -->
    <select id="selectByContentId" resultType="com.gig.collide.content.domain.entity.ContentChapter">
        SELECT <include refid="baseColumns"/>
        FROM t_content_chapter
        WHERE content_id = #{contentId}
        ORDER BY chapter_num ASC
    </select>

    <!-- 根据内容ID查询已发布章节列表 -->
    <select id="selectPublishedByContentId" resultType="com.gig.collide.content.domain.entity.ContentChapter">
        SELECT <include refid="baseColumns"/>
        FROM t_content_chapter
        WHERE content_id = #{contentId} AND status = 'PUBLISHED'
        ORDER BY chapter_num ASC
    </select>

    <!-- 根据内容ID分页查询章节 -->
    <select id="selectByContentIdPaged" resultType="com.gig.collide.content.domain.entity.ContentChapter">
        SELECT <include refid="baseColumns"/>
        FROM t_content_chapter
        WHERE content_id = #{contentId}
        ORDER BY chapter_num ASC
        LIMIT #{offset}, #{limit}
    </select>

    <!-- 根据内容ID和章节号查询章节 -->
    <select id="selectByContentIdAndChapterNum" resultType="com.gig.collide.content.domain.entity.ContentChapter">
        SELECT <include refid="baseColumns"/>
        FROM t_content_chapter
        WHERE content_id = #{contentId} AND chapter_num = #{chapterNum}
    </select>

    <!-- 查询内容的下一章节 -->
    <select id="selectNextChapter" resultType="com.gig.collide.content.domain.entity.ContentChapter">
        SELECT <include refid="baseColumns"/>
        FROM t_content_chapter
        WHERE content_id = #{contentId} 
        AND chapter_num > #{currentChapterNum}
        AND status = 'PUBLISHED'
        ORDER BY chapter_num ASC
        LIMIT 1
    </select>

    <!-- 查询内容的上一章节 -->
    <select id="selectPreviousChapter" resultType="com.gig.collide.content.domain.entity.ContentChapter">
        SELECT <include refid="baseColumns"/>
        FROM t_content_chapter
        WHERE content_id = #{contentId} 
        AND chapter_num &lt; #{currentChapterNum}
        AND status = 'PUBLISHED'
        ORDER BY chapter_num DESC
        LIMIT 1
    </select>

    <!-- 查询内容的第一章节 -->
    <select id="selectFirstChapter" resultType="com.gig.collide.content.domain.entity.ContentChapter">
        SELECT <include refid="baseColumns"/>
        FROM t_content_chapter
        WHERE content_id = #{contentId} AND status = 'PUBLISHED'
        ORDER BY chapter_num ASC
        LIMIT 1
    </select>

    <!-- 查询内容的最后一章节 -->
    <select id="selectLastChapter" resultType="com.gig.collide.content.domain.entity.ContentChapter">
        SELECT <include refid="baseColumns"/>
        FROM t_content_chapter
        WHERE content_id = #{contentId} AND status = 'PUBLISHED'
        ORDER BY chapter_num DESC
        LIMIT 1
    </select>

    <!-- 根据状态查询章节列表 -->
    <select id="selectByStatus" resultType="com.gig.collide.content.domain.entity.ContentChapter">
        SELECT <include refid="baseColumns"/>
        FROM t_content_chapter
        WHERE status = #{status}
        ORDER BY create_time DESC
    </select>

    <!-- 批量更新章节状态 -->
    <update id="batchUpdateStatus">
        UPDATE t_content_chapter
        SET status = #{status}
        WHERE id IN
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </update>

    <!-- 删除内容的所有章节 -->
    <delete id="deleteByContentId">
        DELETE FROM t_content_chapter
        WHERE content_id = #{contentId}
    </delete>

    <!-- 统计内容的章节总数 -->
    <select id="countByContentId" resultType="java.lang.Long">
        SELECT COUNT(*)
        FROM t_content_chapter
        WHERE content_id = #{contentId}
    </select>

    <!-- 统计内容的已发布章节数 -->
    <select id="countPublishedByContentId" resultType="java.lang.Long">
        SELECT COUNT(*)
        FROM t_content_chapter
        WHERE content_id = #{contentId} AND status = 'PUBLISHED'
    </select>

    <!-- 统计内容的总字数 -->
    <select id="countTotalWordsByContentId" resultType="java.lang.Long">
        SELECT COALESCE(SUM(word_count), 0)
        FROM t_content_chapter
        WHERE content_id = #{contentId} AND status = 'PUBLISHED'
    </select>

    <!-- 获取内容的章节统计信息 -->
    <select id="getChapterStats" resultType="java.util.Map">
        SELECT
            COUNT(*) as total_chapters,
            COUNT(CASE WHEN status = 'PUBLISHED' THEN 1 END) as published_chapters,
            COUNT(CASE WHEN status = 'DRAFT' THEN 1 END) as draft_chapters,
            COALESCE(SUM(word_count), 0) as total_words,
            COALESCE(AVG(word_count), 0) as avg_words_per_chapter,
            MAX(chapter_num) as max_chapter_num,
            MIN(create_time) as first_chapter_time,
            MAX(create_time) as latest_chapter_time
        FROM t_content_chapter
        WHERE content_id = #{contentId}
    </select>

    <!-- 查询最新更新的章节 -->
    <select id="selectLatestChapters" resultType="com.gig.collide.content.domain.entity.ContentChapter">
        SELECT <include refid="baseColumns"/>
        FROM t_content_chapter
        WHERE status = 'PUBLISHED'
        ORDER BY create_time DESC
        LIMIT #{limit}
    </select>

    <!-- 重新排序章节号（用于章节删除后的重新编号） -->
    <update id="reorderChapterNumbers">
        UPDATE t_content_chapter t1
        SET chapter_num = (
            SELECT COUNT(*) + 1
            FROM (SELECT * FROM t_content_chapter) t2
            WHERE t2.content_id = #{contentId}
            AND t2.create_time &lt; t1.create_time
        )
        WHERE content_id = #{contentId}
    </update>

</mapper>