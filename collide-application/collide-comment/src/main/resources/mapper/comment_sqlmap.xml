<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.gig.collide.comment.infrastructure.mapper.CommentMapper">

    <!-- 结果映射 - 完全去连表化设计 -->
    <resultMap id="BaseResultMap" type="com.gig.collide.comment.domain.entity.Comment">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="comment_type" property="commentType" jdbcType="VARCHAR" 
                typeHandler="com.baomidou.mybatisplus.core.handlers.MybatisEnumTypeHandler"/>
        <result column="target_id" property="targetId" jdbcType="BIGINT"/>
        <result column="parent_comment_id" property="parentCommentId" jdbcType="BIGINT"/>
        <result column="root_comment_id" property="rootCommentId" jdbcType="BIGINT"/>
        <result column="content" property="content" jdbcType="VARCHAR"/>
        <result column="user_id" property="userId" jdbcType="BIGINT"/>
        <!-- 冗余用户信息，避免连表查询 -->
        <result column="user_nickname" property="userNickname" jdbcType="VARCHAR"/>
        <result column="user_avatar" property="userAvatar" jdbcType="VARCHAR"/>
        <result column="user_verified" property="userVerified" jdbcType="TINYINT"/>
        <result column="reply_to_user_id" property="replyToUserId" jdbcType="BIGINT"/>
        <result column="reply_to_user_nickname" property="replyToUserNickname" jdbcType="VARCHAR"/>
        <result column="status" property="status" jdbcType="VARCHAR" 
                typeHandler="com.baomidou.mybatisplus.core.handlers.MybatisEnumTypeHandler"/>
        <!-- 冗余统计字段，避免连表统计 -->
        <result column="like_count" property="likeCount" jdbcType="INTEGER"/>
        <result column="reply_count" property="replyCount" jdbcType="INTEGER"/>
        <result column="report_count" property="reportCount" jdbcType="INTEGER"/>
        <!-- 状态标识字段 -->
        <result column="is_pinned" property="isPinned" jdbcType="TINYINT"/>
        <result column="is_hot" property="isHot" jdbcType="TINYINT"/>
        <result column="is_essence" property="isEssence" jdbcType="TINYINT"/>
        <result column="quality_score" property="qualityScore" jdbcType="DECIMAL"/>
        <!-- 附加信息字段 -->
        <result column="ip_address" property="ipAddress" jdbcType="VARCHAR"/>
        <result column="device_info" property="deviceInfo" jdbcType="VARCHAR"/>
        <result column="location" property="location" jdbcType="VARCHAR"/>
        <result column="mention_user_ids" property="mentionUserIds" jdbcType="VARCHAR" 
                typeHandler="com.baomidou.mybatisplus.extension.handlers.JacksonTypeHandler"/>
        <result column="images" property="images" jdbcType="VARCHAR" 
                typeHandler="com.baomidou.mybatisplus.extension.handlers.JacksonTypeHandler"/>
        <result column="extra_data" property="extraData" jdbcType="VARCHAR" 
                typeHandler="com.baomidou.mybatisplus.extension.handlers.JacksonTypeHandler"/>
        <!-- 审核字段 -->
        <result column="audit_status" property="auditStatus" jdbcType="VARCHAR"/>
        <result column="audit_reason" property="auditReason" jdbcType="VARCHAR"/>
        <!-- 时间字段 -->
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP"/>
        <result column="update_time" property="updateTime" jdbcType="TIMESTAMP"/>
        <result column="deleted" property="deleted" jdbcType="TINYINT"/>
    </resultMap>

    <!-- 基础字段（完全去连表化） -->
    <sql id="Base_Column_List">
        id, comment_type, target_id, parent_comment_id, root_comment_id, content,
        user_id, user_nickname, user_avatar, user_verified,
        reply_to_user_id, reply_to_user_nickname, status,
        like_count, reply_count, report_count,
        is_pinned, is_hot, is_essence, quality_score,
        ip_address, device_info, location,
        mention_user_ids, images, extra_data,
        audit_status, audit_reason,
        create_time, update_time, deleted
    </sql>

    <!-- 分页查询评论列表（单表查询，无JOIN） -->
    <select id="selectCommentPage" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM t_comment
        WHERE deleted = 0
        <if test="commentType != null">
            AND comment_type = #{commentType}
        </if>
        <if test="targetId != null">
            AND target_id = #{targetId}
        </if>
        <if test="parentCommentId != null">
            AND parent_comment_id = #{parentCommentId}
        </if>
        <if test="status != null">
            AND status = #{status}
        </if>
        <choose>
            <when test="orderBy == 'TIME_DESC'">
                ORDER BY is_pinned DESC, create_time DESC
            </when>
            <when test="orderBy == 'LIKE_DESC'">
                ORDER BY is_pinned DESC, like_count DESC, create_time DESC
            </when>
            <otherwise>
                ORDER BY is_pinned DESC, create_time DESC
            </otherwise>
        </choose>
    </select>

    <!-- 查询评论树（单表递归查询，无JOIN） -->
    <select id="selectCommentTree" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM t_comment
        WHERE deleted = 0
          AND target_id = #{targetId}
          AND comment_type = #{commentType}
        <if test="status != null">
            AND status = #{status}
        </if>
        ORDER BY root_comment_id ASC, parent_comment_id ASC, create_time ASC
    </select>

    <!-- 统计评论数量（单表统计，无JOIN） -->
    <select id="countComments" resultType="java.lang.Long">
        SELECT COUNT(*)
        FROM t_comment
        WHERE deleted = 0
          AND target_id = #{targetId}
          AND comment_type = #{commentType}
        <if test="status != null">
            AND status = #{status}
        </if>
        <if test="parentCommentId != null">
            AND parent_comment_id = #{parentCommentId}
        </if>
    </select>

    <!-- 查询用户评论历史（单表查询，无JOIN） -->
    <select id="selectUserComments" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM t_comment
        WHERE deleted = 0
          AND user_id = #{userId}
        <if test="commentType != null">
            AND comment_type = #{commentType}
        </if>
        <if test="status != null">
            AND status = #{status}
        </if>
        ORDER BY create_time DESC
    </select>

    <!-- 查询热门评论（单表查询，基于冗余统计字段） -->
    <select id="selectHotComments" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM t_comment
        WHERE deleted = 0
          AND target_id = #{targetId}
          AND comment_type = #{commentType}
          AND status = 'NORMAL'
          AND parent_comment_id = 0
        ORDER BY like_count DESC, reply_count DESC, create_time DESC
        LIMIT #{limit}
    </select>

    <!-- 批量更新回复数（冗余字段更新，避免连表） -->
    <update id="updateReplyCount">
        UPDATE t_comment 
        SET reply_count = reply_count + #{increment},
            update_time = NOW()
        WHERE id = #{commentId}
          AND deleted = 0
    </update>

    <!-- 批量更新点赞数（冗余字段更新，避免连表） -->
    <update id="updateLikeCount">
        UPDATE t_comment 
        SET like_count = like_count + #{increment},
            update_time = NOW()
        WHERE id = #{commentId}
          AND deleted = 0
    </update>

    <!-- 查询子评论列表（单表查询，无JOIN） -->
    <select id="selectChildComments" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM t_comment
        WHERE deleted = 0
          AND parent_comment_id = #{parentCommentId}
          AND status = 'NORMAL'
        ORDER BY create_time ASC
        LIMIT #{limit}
    </select>

    <!-- 获取评论的统计信息（直接从冗余字段获取，无连表） -->
    <select id="getCommentStatistics" resultType="java.util.Map">
        SELECT 
            SUM(like_count) as totalLikes,
            SUM(reply_count) as totalReplies,
            COUNT(*) as totalComments,
            MAX(create_time) as lastCommentTime
        FROM t_comment
        WHERE deleted = 0
          AND target_id = #{targetId}
          AND comment_type = #{commentType}
          AND status = 'NORMAL'
    </select>

</mapper> 