<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.gig.collide.like.infrastructure.mapper.LikeMapper">
    
    <!-- 完整结果映射（包含冗余字段） -->
    <resultMap id="BaseResultMap" type="com.gig.collide.like.domain.entity.Like">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="user_id" property="userId" jdbcType="BIGINT"/>
        <result column="target_id" property="targetId" jdbcType="BIGINT"/>
        <result column="target_type" property="targetType" jdbcType="VARCHAR"/>
        <result column="action_type" property="actionType" jdbcType="INTEGER"/>
        
        <!-- 冗余用户信息（去连表化关键字段） -->
        <result column="user_nickname" property="userNickname" jdbcType="VARCHAR"/>
        <result column="user_avatar" property="userAvatar" jdbcType="VARCHAR"/>
        
        <!-- 冗余目标信息（去连表化关键字段） -->
        <result column="target_title" property="targetTitle" jdbcType="VARCHAR"/>
        <result column="target_author_id" property="targetAuthorId" jdbcType="BIGINT"/>
        
        <!-- 追踪信息 -->
        <result column="ip_address" property="ipAddress" jdbcType="VARCHAR"/>
        <result column="device_info" property="deviceInfo" jdbcType="VARCHAR"/>
        <result column="platform" property="platform" jdbcType="VARCHAR"/>
        
        <!-- 时间字段 -->
        <result column="created_time" property="createdTime" jdbcType="TIMESTAMP"/>
        <result column="updated_time" property="updatedTime" jdbcType="TIMESTAMP"/>
        
        <!-- 状态字段 -->
        <result column="status" property="status" jdbcType="TINYINT"/>
        <result column="deleted" property="deleted" jdbcType="TINYINT"/>
    </resultMap>
    
    <!-- 完整字段列表（包含冗余字段） -->
    <sql id="Base_Column_List">
        id, user_id, target_id, target_type, action_type,
        user_nickname, user_avatar, target_title, target_author_id,
        ip_address, device_info, platform,
        created_time, updated_time, status, deleted
    </sql>
    
    <!-- 基础字段列表（不包含冗余字段，用于插入） -->
    <sql id="Insert_Column_List">
        user_id, target_id, target_type, action_type,
        user_nickname, user_avatar, target_title, target_author_id,
        ip_address, device_info, platform,
        created_time, updated_time, status, deleted
    </sql>
    
    <!-- ========== 核心查询方法（单表查询，去连表化） ========== -->
    
    <!-- 根据用户ID和目标对象查询点赞记录（带唯一索引优化） -->
    <select id="selectByUserAndTarget" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/> 
        FROM t_like 
        WHERE user_id = #{userId} 
          AND target_id = #{targetId} 
          AND target_type = #{targetType}
          AND deleted = 0
        LIMIT 1
    </select>
    
    <!-- 分页查询点赞记录（包含完整冗余信息） -->
    <select id="selectLikePage" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/> 
        FROM t_like 
        WHERE deleted = 0
          AND status = 1
        <if test="userId != null">
            AND user_id = #{userId}
        </if>
        <if test="targetId != null">
            AND target_id = #{targetId}
        </if>
        <if test="targetType != null and targetType != ''">
            AND target_type = #{targetType}
        </if>
        <if test="actionType != null">
            AND action_type = #{actionType}
        </if>
        <if test="startTime != null">
            AND created_time >= #{startTime}
        </if>
        <if test="endTime != null">
            AND created_time &lt;= #{endTime}
        </if>
        ORDER BY created_time DESC
    </select>
    
    <!-- 统计目标对象的点赞数（单表聚合查询） -->
    <select id="countLikesByTarget" resultType="java.lang.Long">
        SELECT COUNT(*) 
        FROM t_like 
        WHERE target_id = #{targetId} 
          AND target_type = #{targetType}
          AND action_type = #{actionType}
          AND status = 1
          AND deleted = 0
    </select>
    
    <!-- 获取用户的点赞历史（包含冗余目标信息） -->
    <select id="selectUserLikeHistory" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/> 
        FROM t_like 
        WHERE user_id = #{userId}
          AND deleted = 0
          AND status = 1
        <if test="targetType != null and targetType != ''">
            AND target_type = #{targetType}
        </if>
        <if test="actionType != null">
            AND action_type = #{actionType}
        </if>
        <if test="startTime != null">
            AND created_time >= #{startTime}
        </if>
        <if test="endTime != null">
            AND created_time &lt;= #{endTime}
        </if>
        ORDER BY created_time DESC
    </select>
    
    <!-- 批量查询用户对多个对象的点赞状态 -->
    <select id="selectBatchUserLikeStatus" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/> 
        FROM t_like 
        WHERE user_id = #{userId}
          AND target_type = #{targetType}
          AND target_id IN 
        <foreach collection="targetIds" item="targetId" open="(" separator="," close=")">
            #{targetId}
        </foreach>
          AND deleted = 0
          AND status = 1
        ORDER BY created_time DESC
    </select>
    
    <!-- 获取对象的点赞用户列表（包含冗余用户信息） -->
    <select id="selectLikeUsers" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/> 
        FROM t_like 
        WHERE target_id = #{targetId}
          AND target_type = #{targetType}
          AND action_type = #{actionType}
          AND deleted = 0
          AND status = 1
        ORDER BY created_time DESC
    </select>
    
    <!-- ========== 高级查询方法 ========== -->
    
    <!-- 获取用户最近点赞的内容（包含冗余信息，无需关联查询） -->
    <select id="selectUserRecentLikes" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/> 
        FROM t_like 
        WHERE user_id = #{userId}
          AND action_type = 1
          AND deleted = 0
          AND status = 1
        <if test="targetType != null and targetType != ''">
            AND target_type = #{targetType}
        </if>
        ORDER BY created_time DESC
        LIMIT #{limit}
    </select>
    
    <!-- 获取热门点赞内容排行（基于统计字段） -->
    <select id="selectPopularTargets" resultType="map">
        SELECT 
            target_id,
            target_type,
            target_title,
            target_author_id,
            COUNT(*) as like_count,
            MAX(created_time) as last_like_time
        FROM t_like 
        WHERE action_type = 1
          AND deleted = 0
          AND status = 1
        <if test="targetType != null and targetType != ''">
            AND target_type = #{targetType}
        </if>
        <if test="startTime != null">
            AND created_time >= #{startTime}
        </if>
        <if test="endTime != null">
            AND created_time &lt;= #{endTime}
        </if>
        GROUP BY target_id, target_type, target_title, target_author_id
        ORDER BY like_count DESC, last_like_time DESC
        LIMIT #{limit}
    </select>
    
    <!-- 获取活跃点赞用户排行（基于冗余字段） -->
    <select id="selectActiveUsers" resultType="map">
        SELECT 
            user_id,
            user_nickname,
            user_avatar,
            COUNT(*) as like_count,
            MAX(created_time) as last_like_time
        FROM t_like 
        WHERE action_type = 1
          AND deleted = 0
          AND status = 1
        <if test="targetType != null and targetType != ''">
            AND target_type = #{targetType}
        </if>
        <if test="startTime != null">
            AND created_time >= #{startTime}
        </if>
        <if test="endTime != null">
            AND created_time &lt;= #{endTime}
        </if>
        GROUP BY user_id, user_nickname, user_avatar
        HAVING like_count >= #{minLikeCount}
        ORDER BY like_count DESC, last_like_time DESC
        LIMIT #{limit}
    </select>
    
    <!-- ========== 统计查询方法（单表聚合） ========== -->
    
    <!-- 获取目标对象的详细统计信息 -->
    <select id="selectTargetStatistics" resultType="map">
        SELECT 
            target_id,
            target_type,
            SUM(CASE WHEN action_type = 1 THEN 1 ELSE 0 END) as like_count,
            SUM(CASE WHEN action_type = -1 THEN 1 ELSE 0 END) as dislike_count,
            COUNT(DISTINCT user_id) as unique_user_count,
            MAX(created_time) as last_action_time,
            MIN(created_time) as first_action_time
        FROM t_like 
        WHERE target_id = #{targetId}
          AND target_type = #{targetType}
          AND deleted = 0
          AND status = 1
        GROUP BY target_id, target_type
    </select>
    
    <!-- 获取用户的点赞统计信息 -->
    <select id="selectUserStatistics" resultType="map">
        SELECT 
            user_id,
            COUNT(*) as total_actions,
            SUM(CASE WHEN action_type = 1 THEN 1 ELSE 0 END) as like_count,
            SUM(CASE WHEN action_type = -1 THEN 1 ELSE 0 END) as dislike_count,
            COUNT(DISTINCT target_type) as target_type_count,
            COUNT(DISTINCT DATE(created_time)) as active_days,
            MAX(created_time) as last_action_time
        FROM t_like 
        WHERE user_id = #{userId}
          AND deleted = 0
          AND status = 1
        <if test="startTime != null">
            AND created_time >= #{startTime}
        </if>
        <if test="endTime != null">
            AND created_time &lt;= #{endTime}
        </if>
        GROUP BY user_id
    </select>
    
    <!-- 获取时间段内的点赞趋势 -->
    <select id="selectLikeTrend" resultType="map">
        SELECT 
            DATE(created_time) as date,
            COUNT(*) as total_count,
            SUM(CASE WHEN action_type = 1 THEN 1 ELSE 0 END) as like_count,
            SUM(CASE WHEN action_type = -1 THEN 1 ELSE 0 END) as dislike_count,
            COUNT(DISTINCT user_id) as unique_users
        FROM t_like 
        WHERE deleted = 0
          AND status = 1
        <if test="targetType != null and targetType != ''">
            AND target_type = #{targetType}
        </if>
        <if test="startTime != null">
            AND created_time >= #{startTime}
        </if>
        <if test="endTime != null">
            AND created_time &lt;= #{endTime}
        </if>
        GROUP BY DATE(created_time)
        ORDER BY date DESC
    </select>
    
    <!-- ========== 数据更新方法 ========== -->
    
    <!-- 更新内容表的点赞统计（去连表化关键） -->
    <update id="updateContentLikeCount">
        UPDATE t_content 
        SET like_count = like_count + #{delta},
            like_rate = CASE 
                WHEN (like_count + dislike_count + #{delta}) > 0 
                THEN ROUND(((like_count + #{delta}) * 100.0) / (like_count + dislike_count + #{delta}), 2)
                ELSE 0.00 
            END,
            last_like_time = CASE 
                WHEN #{delta} > 0 THEN NOW() 
                ELSE last_like_time 
            END,
            updated_time = NOW()
        WHERE id = #{contentId} 
          AND like_count + #{delta} >= 0
    </update>
    
    <!-- 更新内容表的点踩统计 -->
    <update id="updateContentDislikeCount">
        UPDATE t_content 
        SET dislike_count = dislike_count + #{delta},
            like_rate = CASE 
                WHEN (like_count + dislike_count + #{delta}) > 0 
                THEN ROUND((like_count * 100.0) / (like_count + dislike_count + #{delta}), 2)
                ELSE 0.00 
            END,
            updated_time = NOW()
        WHERE id = #{contentId} 
          AND dislike_count + #{delta} >= 0
    </update>
    
    <!-- 更新评论表的点赞统计 -->
    <update id="updateCommentLikeCount">
        UPDATE t_comment 
        SET like_count = like_count + #{delta},
            like_rate = CASE 
                WHEN (like_count + dislike_count + #{delta}) > 0 
                THEN ROUND(((like_count + #{delta}) * 100.0) / (like_count + dislike_count + #{delta}), 2)
                ELSE 0.00 
            END,
            last_like_time = CASE 
                WHEN #{delta} > 0 THEN NOW() 
                ELSE last_like_time 
            END,
            updated_time = NOW()
        WHERE id = #{commentId} 
          AND like_count + #{delta} >= 0
    </update>
    
    <!-- 更新评论表的点踩统计 -->
    <update id="updateCommentDislikeCount">
        UPDATE t_comment 
        SET dislike_count = dislike_count + #{delta},
            like_rate = CASE 
                WHEN (like_count + dislike_count + #{delta}) > 0 
                THEN ROUND((like_count * 100.0) / (like_count + dislike_count + #{delta}), 2)
                ELSE 0.00 
            END,
            updated_time = NOW()
        WHERE id = #{commentId} 
          AND dislike_count + #{delta} >= 0
    </update>
    
    <!-- ========== 数据维护方法 ========== -->
    
    <!-- 批量更新冗余用户信息（用户信息变更时同步） -->
    <update id="updateUserInfoBatch">
        UPDATE t_like 
        SET user_nickname = #{userNickname},
            user_avatar = #{userAvatar},
            updated_time = NOW()
        WHERE user_id = #{userId}
          AND deleted = 0
    </update>
    
    <!-- 批量更新冗余目标信息（目标信息变更时同步） -->
    <update id="updateTargetInfoBatch">
        UPDATE t_like 
        SET target_title = #{targetTitle},
            target_author_id = #{targetAuthorId},
            updated_time = NOW()
        WHERE target_id = #{targetId}
          AND target_type = #{targetType}
          AND deleted = 0
    </update>
    
    <!-- 清理过期数据（定期维护） -->
    <delete id="cleanupExpiredData">
        DELETE FROM t_like 
        WHERE deleted = 1 
          AND updated_time &lt; #{expireTime}
        LIMIT #{batchSize}
    </delete>
    
</mapper> 