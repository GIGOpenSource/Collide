# Docker Bridge网络模式配置 - Application服务专用 (完整配置)
# 注意：此文件与 bootstrap-host.yml 配合使用

spring:
  autoconfigure:
    exclude: org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration
  # 数据源配置 (Application服务需要数据库)
  datasource:
    url: jdbc:mysql://${MYSQL_HOST:host.docker.internal}:${MYSQL_PORT:3306}/${MYSQL_DATABASE:collide}?useUnicode=true&characterEncoding=utf8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true
    username: ${MYSQL_USERNAME:root}
    password: ${MYSQL_PASSWORD:123456}
    driver-class-name: com.mysql.cj.jdbc.Driver
    type: com.alibaba.druid.pool.DruidDataSource
    # Druid连接池配置
    initial-size: 50
    min-idle: 50
    max-active: 200
    max-wait: 60000
    time-between-eviction-runs-millis: 60000
    min-evictable-idle-time-millis: 300000
    validation-query: SELECT 1
    test-while-idle: true
    test-on-borrow: false
    test-on-return: false
    pool-prepared-statements: true
    max-pool-prepared-statement-per-connection-size: 20
    filters: stat,wall,slf4j
    connection-properties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500
  # Redis配置 (Application服务需要缓存)
  data:
    redis:
      host: ${REDIS_HOST:host.docker.internal}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:123456}
      ssl:
        enabled: false
  redis:
    redisson:
      config: |
        singleServerConfig:
          idleConnectionTimeout: 10000
          connectTimeout: 10000
          timeout: 3000
          retryAttempts: 3
          retryInterval: 1500
          password: ${REDIS_PASSWORD:123456}
          subscriptionsPerConnection: 5
          clientName: null
          address: "redis://${REDIS_HOST:host.docker.internal}:${REDIS_PORT:6379}"
          subscriptionConnectionMinimumIdleSize: 1
          subscriptionConnectionPoolSize: 50
          connectionMinimumIdleSize: 24
          connectionPoolSize: 64
          database: 0
          dnsMonitoringInterval: 5000
        threads: 16
        nettyThreads: 32
        codec: !<org.redisson.client.codec.StringCodec> {}
        transportMode: "NIO"
  cloud:
    nacos:
      discovery:
        server-addr: ${NACOS_URL:host.docker.internal:8848}
        username: ${NACOS_USERNAME:nacos}
        password: ${NACOS_PASSWORD:nacos}
      config:
        server-addr: ${NACOS_URL:host.docker.internal:8848}
        username: ${NACOS_USERNAME:nacos}
        password: ${NACOS_PASSWORD:nacos}

# MyBatis配置 (Application服务需要数据库操作)
mybatis:
  configuration:
    map-underscore-to-camel-case: true
  mapper-locations: classpath:mapper/*.xml

# JetCache缓存配置 (Application服务需要缓存)
jetcache:
  statIntervalMinutes: 1
  areaInCacheName: false
  local:
    default:
      type: caffeine
      keyConvertor: fastjson
  remote:
    default:
      type: redisson
      keyConvertor: fastjson
      broadcastChannel: projectA
      valueEncoder: java
      valueDecoder: java

# Collide项目自定义配置
collide:
  turbo:
    nacos:
      server:
        url: ${NACOS_URL:host.docker.internal:8848}
        username: ${NACOS_USERNAME:nacos}
        password: ${NACOS_PASSWORD:nacos}
    mysql:
      url: jdbc:mysql://${MYSQL_HOST:host.docker.internal}:${MYSQL_PORT:3306}/${MYSQL_DATABASE:collide}
      username: ${MYSQL_USERNAME:root}
      password: ${MYSQL_PASSWORD:123456}
    redis:
      url: redis://${REDIS_HOST:host.docker.internal}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:123456}
    elasticsearch:
      enable: ${ELASTICSEARCH_ENABLE:true}
      url: ${ELASTICSEARCH_URL:host.docker.internal:9200}
      username: ${ELASTICSEARCH_USERNAME:elastic}
      password: ${ELASTICSEARCH_PASSWORD:123456}
    xxl-job:
      url: ${XXL_JOB_URL:host.docker.internal:8081}
      appName: ${XXL_JOB_APP_NAME:xxl-job-executor}
      accessToken: ${XXL_JOB_ACCESS_TOKEN:default_token}
    sentinel:
      url: ${SENTINEL_URL:host.docker.internal}
      port: ${SENTINEL_PORT:8888}
      nacos:
        data-id: ${SENTINEL_NACOS_DATA_ID:collide-application-sentinel}
    seata:
      url: ${SEATA_URL:host.docker.internal:8091}
      applicationId: ${SEATA_APPLICATION_ID:collide-application}
      txServiceGroup: ${SEATA_TX_SERVICE_GROUP:collide_tx_group}

# Dubbo配置 (Application服务需要RPC)
dubbo:
  registry:
    address: nacos://${NACOS_URL:host.docker.internal:8848}?username=${NACOS_USERNAME:nacos}&password=${NACOS_PASSWORD:nacos}
  protocol:
    name: dubbo
    port: -1

# RocketMQ配置 (Application服务需要消息队列)
rocketmq:
  name-server: ${ROCKETMQ_URL:host.docker.internal:9876}

# 日志配置
logging:
  level:
    root: ${LOG_LEVEL:INFO}
    com.gig.collide: ${APP_LOG_LEVEL:DEBUG}
  file:
    path: /app/logs
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n"

# 管理端点配置
management:
  endpoint:
    health:
      show-details: always
  endpoints:
    web:
      exposure:
        include: "*"
  server:
    port: ${MANAGEMENT_PORT:${server.port}}

# 服务端口配置
server:
  port: ${SERVER_PORT:9503} 