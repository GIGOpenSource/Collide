# Docker Bridge网络模式配置 - Auth服务专用  
# 注意：此文件与 bootstrap-host.yml 配合使用

spring:
  # Redis配置 (Auth服务需要缓存)
  data:
    redis:
      host: ${REDIS_HOST:host.docker.internal}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:123456}
      ssl:
        enabled: false
  redis:
    redisson:
      config: |
        singleServerConfig:
          idleConnectionTimeout: 10000
          connectTimeout: 10000
          timeout: 3000
          retryAttempts: 3
          retryInterval: 1500
          password: ${REDIS_PASSWORD:123456}
          subscriptionsPerConnection: 5
          clientName: null
          address: "redis://${REDIS_HOST:host.docker.internal}:${REDIS_PORT:6379}"
          subscriptionConnectionMinimumIdleSize: 1
          subscriptionConnectionPoolSize: 50
          connectionMinimumIdleSize: 24
          connectionPoolSize: 64
          database: 0
          dnsMonitoringInterval: 5000
        threads: 16
        nettyThreads: 32
        codec: !<org.redisson.client.codec.StringCodec> {}
        transportMode: "NIO"
  cloud:
    nacos:
      discovery:
        server-addr: ${NACOS_URL:host.docker.internal:8848}
        username: ${NACOS_USERNAME:nacos}
        password: ${NACOS_PASSWORD:nacos}
      config:
        server-addr: ${NACOS_URL:host.docker.internal:8848}
        username: ${NACOS_USERNAME:nacos}
        password: ${NACOS_PASSWORD:nacos}

# JetCache缓存配置 (Auth服务需要缓存)
jetcache:
  statIntervalMinutes: 1
  areaInCacheName: false
  local:
    default:
      type: caffeine
      keyConvertor: fastjson
  remote:
    default:
      type: redisson
      keyConvertor: fastjson
      broadcastChannel: projectA
      valueEncoder: java
      valueDecoder: java

# Collide项目自定义配置
collide:
  turbo:
    nacos:
      server:
        url: ${NACOS_URL:host.docker.internal:8848}
        username: ${NACOS_USERNAME:nacos}
        password: ${NACOS_PASSWORD:nacos}
    redis:
      url: redis://${REDIS_HOST:host.docker.internal}
      port: ${REDIS_PORT:6379} 
      password: ${REDIS_PASSWORD:123456}
    sentinel:
      url: ${SENTINEL_URL:host.docker.internal}
      port: ${SENTINEL_PORT:8888}
      nacos:
        data-id: ${SENTINEL_NACOS_DATA_ID:collide-auth-sentinel}

# Dubbo配置 (Auth服务需要RPC)
dubbo:
  registry:
    address: nacos://${NACOS_URL:host.docker.internal:8848}?username=${NACOS_USERNAME:nacos}&password=${NACOS_PASSWORD:nacos}
  protocol:
    name: dubbo
    port: -1

# 日志配置
logging:
  level:
    root: ${LOG_LEVEL:INFO}
    com.gig.collide: ${APP_LOG_LEVEL:DEBUG}
  file:
    path: /app/logs
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n"

# 管理端点配置
management:
  endpoint:
    health:
      show-details: always
  endpoints:
    web:
      exposure:
        include: "*"
  server:
    port: ${MANAGEMENT_PORT:${server.port}}

# 服务端口配置
server:
  port: ${SERVER_PORT:9502} 